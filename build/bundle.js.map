{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/utils.ts","../../src/api.ts","../../src/stores.ts","../../src/websocket.ts","../../src/comps/Github.svelte","../../src/comps/Joiner.svelte","../../src/comps/Game.svelte","../../src/comps/Games.svelte","../../src/comps/Clients.svelte","../../src/comps/Notification.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.0' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","const onlineApi = 'https://kij.willy-selma.de/db';\nexport async function db(method, url, data) {\n    return await fetch(onlineApi + url, {\n        method,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    }).then((res) => res.json());\n}\nexport function HRDate(timestamp) {\n    const a = new Date(timestamp * 1000);\n    const year = a.getFullYear();\n    const month = (a.getMonth() + 1).toString().padStart(2, '0');\n    const day = a.getDate().toString().padStart(2, '0');\n    const hour = a.getHours().toString().padStart(2, '0');\n    const min = a.getMinutes().toString().padStart(2, '0');\n    return `${day}.${month}.${year} ${hour}:${min}`;\n}\nexport function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import { db } from \"./utils\";\nimport { storedGames, storedSettings } from \"./stores\";\nimport { sendMessage } from \"./websocket\";\nexport async function getSettings() {\n    const settings = await db('GET', '/settings/');\n    storedSettings.update((value) => {\n        return settings;\n    });\n}\nexport async function getGames() {\n    const games = await db('GET', `/games?_sort=date&_order=desc`);\n    storedGames.update((value) => {\n        return games;\n    });\n}\nexport async function deleteGame(gameID) {\n    await db('DELETE', '/games/' + gameID);\n    sendMessage({\n        message: 'GAME_UPDATE',\n        gameid: gameID,\n        reason: 'delete game',\n    });\n}\nexport async function deleteJoiner(joinerID, gameID) {\n    const game = await db('GET', '/games/' + gameID);\n    const filteredJoiner = game.joiner.filter((player) => (player.id !== joinerID));\n    await db('PATCH', '/games/' + gameID, {\n        joiner: filteredJoiner,\n    });\n    sendMessage({\n        message: 'GAME_UPDATE',\n        gameid: gameID,\n        joinerid: joinerID,\n        reason: 'delete joiner',\n    });\n}\nexport async function setGOGOGO(joinerID, gameID) {\n    sendMessage({\n        message: 'GOGOGO',\n        gameid: gameID,\n        joinerid: joinerID,\n    });\n}\n","import { writable } from 'svelte/store';\nimport { getSettings, getGames } from \"./api\";\nlet myClientId = -1;\nexport const storedThisClient = writable({\n    id: myClientId,\n});\nexport const storedGames = writable([]);\nexport const storedClients = writable([]);\nexport const updateClients = (clients) => {\n    storedClients.update((value) => {\n        return clients;\n    });\n};\nexport const storedSettings = writable({});\nexport const localStore = {\n    set: (key, value) => {\n        return localStorage.setItem(key, value);\n    },\n    get: (key, withParse) => {\n        if (withParse) {\n            return JSON.parse(localStorage.getItem(key));\n        }\n        else {\n            return localStorage.getItem(key);\n        }\n    },\n    remove: (key) => {\n        return localStorage.removeItem(key);\n    },\n};\n// init\n(async () => {\n    await getSettings();\n    await getGames();\n})();\n","import { localStore } from './stores';\nimport { capitalizeFirstLetter } from './utils';\nconst wsApi = 'wss://kij.willy-selma.de/ws';\nconst pre = '[WSS]';\nlet pingTimeout = null;\nlet socket;\nexport function connectToWSS(updateCallback) {\n    console.log(pre, 'connectToWSS', wsApi);\n    socket = new WebSocket(wsApi);\n    socket.onmessage = async (event) => {\n        const data = event.data;\n        console.log(pre, 'onmessage', JSON.parse(data));\n        updateCallback(JSON.parse(data));\n    };\n    socket.onopen = heartbeat;\n    socket.onping = heartbeat;\n    socket.onerror = (e) => {\n        console.error(pre, 'socket.error', e);\n        updateCallback({ message: 'ERROR', error: e });\n    };\n    socket.onclose = (e) => {\n        console.log(pre, 'socket.close', e);\n        clearTimeout(pingTimeout);\n        updateCallback({ message: 'CLOSE', error: e });\n    };\n    window.onbeforeunload = () => {\n        socket.onclose = () => {\n        }; // disable onclose handler first\n        socket.close();\n    };\n}\nexport function sendMessage(data) {\n    console.log(pre, 'sendMessage', data, socket);\n    if (socket) {\n        socket.send(JSON.stringify(data));\n    }\n}\nexport function sendClientNick(nickname) {\n    /*\n     parsedResult: {\n         browser: {name: \"Chrome\", version: \"87.0.4280.66\"}\n         engine: {name: \"Blink\"}\n         os: {name: \"Windows\", version: \"NT 10.0\", versionName: \"10\"}\n         platform: {type: \"desktop\"}\n     }\n    */\n    // @ts-ignore TS2339: Property 'bowser' does not exist on type 'Window & typeof globalThis\n    const browser = window.bowser.getParser(window.navigator.userAgent);\n    if (nickname) {\n        localStore.set('nickname', nickname);\n        sendMessage({\n            message: 'SET_CLIENTNICK',\n            type: ['pwa', browser.parsedResult.os.name, browser.parsedResult.platform.type, browser.parsedResult.browser.name]\n                .map(value => capitalizeFirstLetter(value))\n                .join(' / '),\n            nick: nickname,\n        });\n    }\n}\nfunction heartbeat() {\n    console.log(pre, 'heartbeat');\n    if (pingTimeout !== null) {\n        clearTimeout(pingTimeout);\n    }\n    // Use `WebSocket#terminate()`, which immediately destroys the connection,\n    // instead of `WebSocket#close()`, which waits for the close timer.\n    // Delay should be equal to the interval at which your server\n    // sends out pings plus a conservative assumption of the latency.\n    pingTimeout = setTimeout(() => {\n        if (socket) {\n            //console.log('heartbeat.terminate');\n            //socket.terminate();\n        }\n    }, 30000 + 1000);\n}\n","<a href=\"https://github.com/Neofonie/kickerjoiner-pwa\" class=\"github-corner\"\n   aria-label=\"View source on GitHub\">\n    <svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\"\n         style=\"fill:#fff; color:#151513; position: absolute; top: 0; border: 0; right: 0;\" aria-hidden=\"true\">\n        <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\n        <path d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n              fill=\"currentColor\" style=\"transform-origin: 130px 106px;\" class=\"octo-arm\"></path>\n        <path d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n              fill=\"currentColor\" class=\"octo-body\"></path>\n    </svg>\n</a>\n<style>\n    .github-corner {\n        position: absolute;\n        z-index: 1;\n        right: 0;\n        top: 0;\n    }\n\n    .github-corner:hover .octo-arm {\n        animation: octocat-wave 560ms ease-in-out\n    }\n\n    @keyframes octocat-wave {\n        0%, 100% {\n            transform: rotate(0)\n        }\n        20%, 60% {\n            transform: rotate(-25deg)\n        }\n        40%, 80% {\n            transform: rotate(10deg)\n        }\n    }\n\n    @media (max-width: 500px) {\n        .github-corner:hover .octo-arm {\n            animation: none\n        }\n\n        .github-corner .octo-arm {\n            animation: octocat-wave 560ms ease-in-out\n        }\n    }\n</style>\n","<script lang=\"ts\">\n    import { localStore, storedClients } from '../stores';\n    import { sendMessage } from \"../websocket\";\n    import { onMount } from \"svelte\";\n\n    let clients: any;\n    let nickname: any;\n\n    storedClients.subscribe(value => clients = value);\n\n    const callPlusOne = () => {\n        sendMessage({\n            message: 'PLUS_ONE',\n            nick: nickname || 'anonymous',\n        });\n    }\n\n    onMount(() => {\n        nickname = localStore.get('nickname');\n    })\n</script>\n\n<div class=\"joiner container\">\n    <h1>Joiner</h1>\n    <input type=\"text\" placeholder=\"player name\" bind:value={nickname} on:keypress={(event) => (event.key.toLowerCase() === 'enter') && callPlusOne()}/>\n    <button on:click={callPlusOne} id=\"plusone\">+1</button>\n</div>\n\n<style lang=\"scss\">\n  @import '../scss/variables';\n\n  .joiner {\n\n  }\n</style>\n","<script lang=\"ts\">\n    import { HRDate } from '../utils';\n    import { deleteJoiner, deleteGame, setGOGOGO } from '../api';\n    import { storedSettings } from '../stores';\n\n    export let game: any;\n    let settings: any;\n    let showGogogoButtons = false;\n\n    storedSettings.subscribe(value => {\n        settings = value;\n    });\n\n    $: {\n        showGogogoButtons = (game.joiner.length === settings.maxjoiner);\n    }\n</script>\n\n<div class=\"game{game.done ? ' is-done' : ''}\">\n    {#if game.done}\n        <div class=\"done-layer\" label=\"GOGOGO\" date={HRDate(game.donedate)}></div>\n    {/if}\n    <table>\n        <thead>\n        <tr>\n            <td colspan=\"5\">\n                #{game.id} / {HRDate(game.date)}\n            </td>\n            <td center>\n                <i on:click={() => deleteGame(game.id)} class=\"game-delete far fa-trash-alt\"></i>\n            </td>\n        </tr>\n        <tr>\n            <th>ID</th>\n            <th>CID</th>\n            <th>Nick</th>\n            <th center>Date</th>\n            <th center width=\"100\">State</th>\n            <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        {#each game.joiner as joiner (joiner.id)}\n            <tr>\n                <td>{joiner.id}</td>\n                <td>{joiner.clientid}</td>\n                <td>{joiner.nick}</td>\n                <td center>{HRDate(joiner.date)}</td>\n                <td center>\n                    {#if !joiner.gogogo}\n                        {#if !showGogogoButtons}\n                            +1\n                        {:else}\n                            <button on:click={() => setGOGOGO(joiner.id, game.id)}>GOGOGO</button>\n                        {/if}\n                    {:else}\n                        <span class=\"gogogo\">GOGOGO</span>\n                    {/if}\n                </td>\n                <td center>\n                    <i on:click={() => deleteJoiner(joiner.id, game.id)} class=\"far fa-trash-alt\"></i>\n                </td>\n            </tr>\n        {/each}\n        </tbody>\n    </table>\n</div>\n\n<style lang=\"scss\">\n  @import '../scss/variables';\n\n  .game {\n    position: relative;\n    margin-bottom: $space-lg;\n\n    .done-layer {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, .3);\n      z-index: z-index('overlay');\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      border-radius: $border-radius;\n      text-shadow: 2px 2px $color-red;\n      font-weight: bold;\n\n      &:before {\n        content: attr(label);\n        transform: rotate(-33deg) translate(0, -5px);\n        font-size: ms(3);\n      }\n\n      &:after {\n        content: attr(date);\n        transform: rotate(-33deg) translate(15px, -10px);\n        font-size: ms(0);\n      }\n    }\n\n    &.is-done {\n      .game-delete {\n        z-index: z-index('click');\n        position: relative;\n        color: $color-white;\n        text-shadow: 2px 2px $color-red;\n\n        &:hover {\n          color: inherit;\n          text-shadow: none;\n        }\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\">\n    import { storedGames } from '../stores';\n    import Game from \"./Game.svelte\";\n\n    let games: any;\n\n    storedGames.subscribe(value => games = value);\n</script>\n\n<div class=\"games container\">\n    <h2>Games</h2>\n\n    {#each games as game (game.id)}\n        <Game {game} />\n    {/each}\n</div>\n\n<style lang=\"scss\">\n  @import '../scss/variables';\n\n  .games {\n\n  }\n</style>\n","<script lang=\"ts\">\n    import { HRDate } from '../utils';\n    import { localStore, storedClients } from '../stores';\n    import { sendClientNick } from '../websocket';\n    import { onMount } from 'svelte';\n\n    let clients: any = [];\n    let nickname: any;\n\n    storedClients.subscribe(value => clients = value);\n\n    const sendClientNewNick = () => {\n        sendClientNick(nickname);\n    }\n\n    onMount(() => {\n        nickname = localStore.get('nickname');\n    })\n</script>\n\n<div class=\"clients container\">\n    <h2>Clients</h2>\n    <div class=\"mb-sm\">\n        <input type=\"text\" placeholder=\"anonymous\"\n               bind:value={nickname}\n               on:keypress={(event) => (event.key.toLowerCase() === 'enter') && sendClientNewNick()}/>\n        <button on:click={sendClientNewNick}>Set your clientname</button>\n    </div>\n    <table>\n        <thead>\n        <tr>\n            <th>Id</th>\n            <th>Nick</th>\n            <th>Lastseen</th>\n        </tr>\n        </thead>\n        <tbody>\n        {#each clients as client (client.id)}\n            <tr>\n                <td>{client.id}</td>\n                <td>{client.nick}{client.isThisYou ? ' (You)' : ''}<br /><span class=\"ms--1\">{client.type}</span></td>\n                <td>{HRDate(client.lastseendate)}</td>\n            </tr>\n        {/each}\n        </tbody>\n    </table>\n</div>\n\n<style lang=\"scss\">\n  @import '../scss/variables';\n\n  .clients {\n\n  }\n</style>\n","<script>\n    import { onMount } from 'svelte';\n\n    const Notification = window.Notification || window.mozNotification || window.webkitNotification;\n    const granted = 'granted';\n\n    const promptThePermission = () => {\n        Notification.requestPermission(\n            function (permission) {\n                isGranted = permission === granted;\n                if ('permissions' in navigator) {\n                    navigator.permissions.query({ name: 'notifications' })\n                        .then(function (notificationPerm) {\n                            notificationPerm.onchange = function () {\n                                isGranted = notificationPerm.state === granted;\n                            };\n                        });\n                }\n            }\n        );\n    }\n\n    let isGranted = false;\n\n    onMount(() => {\n        isGranted = Notification.permission === granted;\n    });\n</script>\n\n{#if !isGranted}\n    <button on:click={() => promptThePermission()}>\n        <i class=\"fas fa-bell\"></i>\n    </button>\n{/if}\n\n<style lang=\"scss\">\n  @import '../scss/variables';\n\n  button {\n    position: fixed;\n    left: $space-xl;\n    bottom: $space-xl;\n    cursor: pointer;\n    background: $color-white;\n    color: $color-black;\n    z-index: z-index('overlay');\n    border: none;\n    font-size: ms(5);\n    border-radius: $border-radius-xl;\n\n    &:hover {\n      color: $color-primary;\n\n      i {\n        transform: rotate(15deg);\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\">\n    import './scss/global.scss';\n    import './scss/table.scss';\n    import { connectToWSS, sendClientNick } from './websocket';\n    import { getGames } from './api';\n    import { updateClients, storedThisClient } from './stores';\n    import Github from \"./comps/Github.svelte\";\n    import Joiner from \"./comps/Joiner.svelte\";\n    import Games from \"./comps/Games.svelte\";\n    import Clients from \"./comps/Clients.svelte\";\n    import Notification from \"./comps/Notification.svelte\";\n\n    connectToWSS((data) => {\n        switch (data.message) {\n            case 'CONNECTION_ON': // connection with server is on\n                storedThisClient.update(value => data.clientid);\n                const lsNickName = localStorage.getItem('nickname');\n                if (lsNickName !== null) {\n                    sendClientNick(lsNickName);\n                }\n                break;\n            case 'GAME_UPDATE': // joined game got an update\n                getGames();\n                break;\n            case 'GAME_READY': // four joiners in one game\n                getGames();\n                break;\n            case 'GAME_GOGOGO': // all four joiners pressed gogogo in one game\n                getGames();\n                break;\n            case 'CLIENT_UPDATE':\n                updateClients(data.clients);\n                break;\n            case 'ERROR':\n                //document.querySelector('#error').innerHTML = JSON.stringify(data, null, 2);\n                console.error('wss', data);\n                break;\n            case 'CLOSE':\n                break;\n        }\n    });\n</script>\n\n<main>\n    <Github />\n    <Joiner/>\n    <Games/>\n    <Clients/>\n    <Notification />\n</main>\n\n<style lang=\"scss\" global>\n  @import './scss/variables';\n\n</style>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","current_component","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","i","length","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","d","destroy_block","lookup","key","outro_and_destroy_block","update_keyed_each","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","n","old_indexes","new_blocks","new_lookup","Map","deltas","child_ctx","get","set","Math","abs","will_move","did_move","m","first","new_block","old_block","new_key","old_key","create_component","mount_component","customElement","on_destroy","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","subscriber","subscribe","invalidate","size","async","db","method","url","fetch","headers","body","JSON","stringify","res","json","HRDate","timestamp","Date","year","getFullYear","month","getMonth","toString","padStart","getDate","getHours","getMinutes","getGames","games","storedGames","storedThisClient","id","storedClients","storedSettings","localStore","localStorage","setItem","withParse","parse","getItem","settings","getSettings","wsApi","pre","socket","pingTimeout","sendMessage","console","log","send","sendClientNick","nickname","browser","window","bowser","getParser","navigator","userAgent","message","parsedResult","os","platform","capitalizeFirstLetter","string","charAt","toUpperCase","slice","join","nick","heartbeat","clearTimeout","setTimeout","callPlusOne","toLowerCase","donedate","clientid","date","gogogo","done","joiner","game","showGogogoButtons","maxjoiner","gameID","gameid","reason","deleteGame","joinerID","joinerid","setGOGOGO","filteredJoiner","player","deleteJoiner","r","isThisYou","lastseendate","clients","sendClientNewNick","granted","Notification","mozNotification","webkitNotification","promptThePermission","requestPermission","permission","isGranted","permissions","query","notificationPerm","onchange","state","updateCallback","lsNickName","error","WebSocket","onmessage","onopen","onping","onerror","e","onclose","onbeforeunload","close"],"mappings":"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"}